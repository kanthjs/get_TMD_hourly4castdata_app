[{"name":"app.R","content":"# Load required libraries\r\nlibrary(shiny)\r\nlibrary(leaflet)\r\nlibrary(ggplot2)\r\nlibrary(DT)\r\nlibrary(httr2)\r\nlibrary(tidyverse)\r\nlibrary(lubridate)\r\nlibrary(plotly)\r\nlibrary(shinydashboard)\r\n\r\n# Define default locations\r\ndefault_locations <- list(\r\n  \"Bangkok\" = list(lat = 13.7563, lon = 100.5018),\r\n  \"Chiang Mai\" = list(lat = 18.7883, lon = 98.9853),\r\n  \"Phuket\" = list(lat = 7.8804, lon = 98.3923),\r\n  \"Pattaya\" = list(lat = 12.9236, lon = 100.8824)\r\n)\r\n\r\nTMD_token <- \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI1Y2Y4ODk4ZDYyZTUxMjc3YjgzYWJkNzViYTMxNzQ3N2EyOGU4N2RkYThkNWQ4MWU0NTc5YzQzYWNiZTFkMTA1NWYyMDJiOWM4ZDcwZTY0In0.eyJhdWQiOiIyIiwianRpIjoiYjVjZjg4OThkNjJlNTEyNzdiODNhYmQ3NWJhMzE3NDc3YTI4ZTg3ZGRhOGQ1ZDgxZTQ1NzljNDNhY2JlMWQxMDU1ZjIwMmI5YzhkNzBlNjQiLCJpYXQiOjE3MjgwMzA4NTksIm5iZiI6MTcyODAzMDg1OSwiZXhwIjoxNzU5NTY2ODU5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.UZKPGcezqCvXsgk5OvW86P2OouzMGJnLmP35ZT3QXoDUbnQE6iMHp7QZSCw9_fNMisAHEkl-qMbl7T7OE-fTrP2PmyCO2B-cYEIvIcdPo_vzOmt4wcx_r5qrKc2dSm_GNTAb9vgw7AoPz6ff74lQhr9iDLwFmw1lC1MqY7OdibsvOaB6W9IJwXQgbw8DmlEtTDhPJ7rPym-ewfuRMfja_09cpXVoeczLiY-kB7IT0YwsAiBd6TuwblIcJpRPJKr829xtdHGGEvQCAXi87EP0Da5j27pQRF7zzWYBg5bY9inBQ9BHHDV_-egZydzEvjHtGd5HcrNJQBT29Dz4DMXvk6CPkxh9qIwNVGNk4cOmTWaMGoxZZUS4tHl4JD01GosbgV2-ls1d_GKJ3gXFbiHF22jvBJCdCRkWrZ5Oqfepph_zXYxTc9uOU0wgn8VRwDqysPeO5DYU8Q1Dbilzg-4FlT1xjklBvHUAUp5X3ydJXcHHjIvbkV0WCeefCYqqY97ceZMKODcU52NN85IDsAB40QGqF9iBBU_q6Rk1qvATK2B3kCeCGJiTDIfKfdraeonqtVZQTBel9dPXFhCKGozkmJG3CyLbolj-4iphd6UK_0kOWQRMC_R1PP5nmUqpJPJwUfJpT0qsIjA73k8CHtQNO4ZMbmVg4iYQLisrBTI7Vto\"\r\n\r\n# Define UI\r\nui <- dashboardPage(\r\n  dashboardHeader(title = \"Weather Monitoring\"),\r\n  dashboardSidebar(\r\n    sidebarMenu(\r\n      menuItem(\"Weather Data\", tabName = \"weather\", icon = icon(\"cloud\")),\r\n      div(\r\n        class = \"sidebar-menu\", style = \"padding: 10px;\",\r\n        selectInput(\"default_location\", \"Select Location:\",\r\n                    choices = c(\"Custom\", names(default_locations)),\r\n                    selected = \"Bangkok\"),\r\n        numericInput(\"longitude\", \"Longitude:\", value = default_locations$Bangkok$lon),\r\n        numericInput(\"latitude\", \"Latitude:\", value = default_locations$Bangkok$lat),\r\n        dateInput(\"selected_date\", \"Selected Date:\", value = Sys.Date(), max = Sys.Date() + 7),\r\n        div(\r\n          style = \"margin: 5px 0;\",\r\n          actionButton(\"run\", \"Get data and run\", class = \"btn-primary btn-sm\"),\r\n          downloadButton(\"download_data\", \"Download CSV\", class = \"btn-sm\")\r\n        ),\r\n        tags$small(\"Click on map to set location or select from preset locations\")\r\n      )\r\n    )\r\n  ),\r\n  dashboardBody(\r\n    tags$head(\r\n      tags$style(HTML(\"\r\n        .content-wrapper, .right-side { background-color: white; }\r\n        .skin-blue .main-header .logo { font-size: 14px; }\r\n        .form-control { font-size: 12px; height: 28px; padding: 4px 8px; }\r\n        .btn { font-size: 12px; padding: 4px 8px; }\r\n      \"))\r\n    ),\r\n    \r\n    tabItems(\r\n      tabItem(tabName = \"weather\",\r\n              fluidRow(\r\n                column(width = 6,\r\n                       box(\r\n                         width = NULL, leafletOutput(\"map\", height = 350),\r\n                         title = \"Location Map\", status = \"primary\", solidHeader = TRUE\r\n                       )\r\n                ),\r\n                column(width = 6,\r\n                       box(\r\n                         width = NULL, dataTableOutput(\"data_table\", height = 350),\r\n                         title = \"Weather Data\", status = \"primary\", solidHeader = TRUE\r\n                       )\r\n                )\r\n              ),\r\n              fluidRow(\r\n                column(width = 4,\r\n                       box(\r\n                         width = NULL, plotlyOutput(\"tc_plot\", height = 250),\r\n                         title = \"Temperature (°C)\", status = \"info\", solidHeader = TRUE\r\n                       )\r\n                ),\r\n                column(width = 4,\r\n                       box(\r\n                         width = NULL, plotlyOutput(\"hr_plot\", height = 250),\r\n                         title = \"Humidity (%)\", status = \"info\", solidHeader = TRUE\r\n                       )\r\n                ),\r\n                column(width = 4,\r\n                       box(\r\n                         width = NULL, plotlyOutput(\"rain_plot\", height = 250),\r\n                         title = \"Rainfall (mm)\", status = \"info\", solidHeader = TRUE\r\n                       )\r\n                )\r\n              )\r\n      )\r\n    )\r\n  )\r\n)\r\nquery_weather_data <- function(latitude, longitude, date) {\r\n  json <- request(\"https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/at\") |>\r\n    req_auth_bearer_token(TMD_token) |>\r\n    req_url_query(\r\n      lat = latitude,\r\n      lon = longitude,\r\n      fields = 'cond,tc,rh,rain',\r\n      date = as.character(date),\r\n      hour = 0,\r\n      duration = 24\r\n    ) |>\r\n    req_perform() |>\r\n    resp_body_json()\r\n}\r\n\r\n# Server Definition\r\nserver <- function(input, output, session) {\r\n  \r\n  # Update coordinates when default location changes\r\n  observeEvent(input$default_location, {\r\n    if (input$default_location != \"Custom\") {\r\n      selected_location <- default_locations[[input$default_location]]\r\n      updateNumericInput(session, \"longitude\", value = selected_location$lon)\r\n      updateNumericInput(session, \"latitude\", value = selected_location$lat)\r\n    }\r\n  })\r\n  \r\n  observe({\r\n    leafletProxy(\"map\") %>% \r\n      clearMarkers() %>%\r\n      addMarkers(lng = input$longitude, lat = input$latitude)\r\n  })\r\n  \r\n  observeEvent(input$map_click, {\r\n    updateSelectInput(session, \"default_location\", selected = \"Custom\")\r\n    updateNumericInput(session, \"longitude\", value = input$map_click$lng)\r\n    updateNumericInput(session, \"latitude\", value = input$map_click$lat)\r\n  })\r\n  \r\n  output$map <- renderLeaflet({\r\n    leaflet() %>% \r\n      addTiles() %>%\r\n      setView(lng = input$longitude, lat = input$latitude, zoom = 6) %>%\r\n      addMarkers(lng = input$longitude, lat = input$latitude)\r\n  })\r\n  \r\n  data_reactive <- eventReactive(input$run, {\r\n    req(input$longitude, input$latitude)\r\n    \r\n    withProgress(message = 'Fetching data...', {\r\n      tryCatch({\r\n        json <- query_weather_data(input$latitude, \r\n                                   input$longitude, \r\n                                   input$selected_date)\r\n        \r\n        json |> \r\n          pluck(1, 1) |> \r\n          pluck(\"forecasts\") |> \r\n          map_dfr(\\(x) {\r\n            tibble(\r\n              time = ymd_hms(x |> pluck(\"time\")),\r\n              tc = x |> pluck(\"data\", \"tc\"),\r\n              rh = x |> pluck(\"data\", \"rh\"),\r\n              rain = x |> pluck(\"data\", \"rain\"),\r\n              cond = x |> pluck(\"data\", \"cond\")\r\n            )\r\n          })\r\n      }, error = function(e) {\r\n        showNotification(\"Error fetching data\", type = \"error\")\r\n        NULL\r\n      })\r\n    })\r\n  })\r\n  \r\n  plot_theme <- theme_minimal() +\r\n    theme(\r\n      text = element_text(size = 10),\r\n      axis.title = element_text(size = 9),\r\n      axis.text = element_text(size = 8),\r\n      plot.margin = margin(2, 2, 2, 2)\r\n    )\r\n  \r\n  output$tc_plot <- renderPlotly({\r\n    req(data_reactive())\r\n    gg <- ggplot(data_reactive(), aes(x = time, y = tc)) +\r\n      geom_line(color = \"red\") +\r\n      geom_point(color = \"darkred\") +\r\n      scale_y_continuous(limits = c(0, 50)) +\r\n      labs(x = \"Time\", y = \"°C\") +\r\n      plot_theme\r\n    ggplotly(gg) %>% \r\n      layout(\r\n        showlegend = FALSE,\r\n        margin = list(l = 40, r = 20, t = 20, b = 40),\r\n        font = list(size = 10)\r\n      )\r\n  })\r\n  \r\n  output$hr_plot <- renderPlotly({\r\n    req(data_reactive())\r\n    gg <- ggplot(data_reactive(), aes(x = time, y = rh)) +\r\n      geom_line(color = \"blue\") +\r\n      geom_point(color = \"darkblue\") +\r\n      scale_y_continuous(limits = c(0, 100)) +\r\n      labs(x = \"Time\", y = \"%\") +\r\n      plot_theme\r\n    ggplotly(gg) %>% \r\n      layout(\r\n        showlegend = FALSE,\r\n        margin = list(l = 40, r = 20, t = 20, b = 40),\r\n        font = list(size = 10)\r\n      )\r\n  })\r\n  \r\n  output$rain_plot <- renderPlotly({\r\n    req(data_reactive())\r\n    gg <- ggplot(data_reactive(), aes(x = time, y = rain)) +\r\n      geom_line(color = \"green\") +\r\n      geom_point(color = \"darkgreen\") +\r\n      scale_y_continuous(limits = c(0, 10)) +\r\n      labs(x = \"Time\", y = \"mm\") +\r\n      plot_theme\r\n    ggplotly(gg) %>% \r\n      layout(\r\n        showlegend = FALSE,\r\n        margin = list(l = 40, r = 20, t = 20, b = 40),\r\n        font = list(size = 10)\r\n      )\r\n  })\r\n  \r\n  output$data_table <- renderDataTable({\r\n    req(data_reactive())\r\n    data_reactive() %>%\r\n      mutate(\r\n        time = format(time, \"%Y-%m-%d %H:%M\"),\r\n        tc = round(tc, 1),\r\n        rh = round(rh, 1),\r\n        rain = round(rain, 2)\r\n      ) %>%\r\n      datatable(\r\n        options = list(\r\n          pageLength = 24,\r\n          dom = 'tp',\r\n          scrollY = \"300px\",\r\n          scrollCollapse = TRUE\r\n        ),\r\n        colnames = c(\"Time\", \"Temp\", \"Humid\", \"Rain\", \"Cond\"),\r\n        class = 'compact'\r\n      )\r\n  })\r\n  \r\n  output$download_data <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"weather_data_\", format(Sys.Date(), \"%Y%m%d\"), \".csv\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(data_reactive(), file, row.names = FALSE)\r\n    }\r\n  )\r\n}\r\n\r\n# Run the Shiny app\r\nshinyApp(ui, server)\r\n","type":"text"}]
